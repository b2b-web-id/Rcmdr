compareModels <- function(){
    models <- union(listLinearModels(), listGeneralizedLinearModels())
    if (length(models) < 2){
        tkmessageBox(message="There are fewer than two models.", 
                icon="error", type="ok")
        tkfocus(.commander)
        return()
        }
    top <- tktoplevel()
    tkwm.title(top, "Compare Models")
    modelsFrame1 <- tkframe(top)
    modelsBox1 <- tklistbox(modelsFrame1, height=min(4, length(models)),
        selectmode="single", background="white", exportselection="FALSE")
    modelsScroll1 <- tkscrollbar(modelsFrame1, repeatinterval=5, 
        command=function(...) tkyview(modelsBox1, ...))
    tkconfigure(modelsBox1, yscrollcommand=function(...) tkset(modelsScroll1, ...))
    for (mod in models) tkinsert(modelsBox1, "end", mod)
    modelsFrame2 <- tkframe(top)
    modelsBox2 <- tklistbox(modelsFrame2, height=min(4, length(models)),
        selectmode="single", background="white", exportselection="FALSE")
    modelsScroll2 <- tkscrollbar(modelsFrame2, repeatinterval=5, 
        command=function(...) tkyview(modelsBox2, ...))
    tkconfigure(modelsBox2, yscrollcommand=function(...) tkset(modelsScroll2, ...))
    for (mod in models) tkinsert(modelsBox2, "end", mod)
    buttonsFrame <- tkframe(top)
    onOK <- function(){
        model1 <- models[as.numeric(tkcurselection(modelsBox1)) + 1]
        model2 <- models[as.numeric(tkcurselection(modelsBox2)) + 1]
        if (!eval(parse(text=paste("class(", model1, ")[1] == class(", model2, ")[1]",
            sep="")), envir=.GlobalEnv)){
                tkmessageBox(message="Models are not of the same class.", 
                    icon="error", type="ok")
                tkgrab.release(top)
                tkdestroy(top)
                compareModels()
                return()
                }
        tkgrab.release(top)
        tkdestroy(top)
        doItAndPrint(paste("anova(", model1, ",", model2, ")", sep=""))
        tkfocus(.commander)
        }
    OKbutton <- tkbutton(buttonsFrame, text="OK", width="12", command=onOK, default="active")
    onCancel <- function() {
        tkgrab.release(top)
        tkfocus(.commander)
        tkdestroy(top)  
        }    
    onHelp <- function() {
        if (.Platform$OS.type != "windows") tkgrab.release(top)
        help(anova)
        }
    helpButton <- tkbutton(top, text="Help", width="12", command=onHelp)
    cancelButton <- tkbutton(buttonsFrame, text="Cancel", width="12", command=onCancel)
    tkgrid(tklabel(modelsFrame1, text="First model (pick one)"), sticky="w")
    tkgrid(modelsBox1, modelsScroll1, sticky="nw")
    tkgrid(tklabel(modelsFrame2, text="Second model (pick one)"), sticky="w")
    tkgrid(modelsBox2, modelsScroll2, sticky="nw")
    tkgrid(modelsFrame1, modelsFrame2, sticky="w")
    tkgrid(OKbutton, cancelButton, sticky="w")
    tkgrid(buttonsFrame, helpButton, sticky="w")
    tkgrid.configure(helpButton, sticky="e")
    tkgrid.configure(modelsScroll1, sticky="ns")
    tkgrid.configure(modelsScroll2, sticky="ns")
    for (row in 0:1) tkgrid.rowconfigure(top, row, weight=0)
    for (col in 0:1) tkgrid.columnconfigure(top, col, weight=0)
    .Tcl("update idletasks")
    tkwm.resizable(top, 0, 0)
    tkbind(top, "<Return>", onOK)
    if (.double.click) tkbind(top, "<Double-ButtonPress-1>", onOK)
    tkwm.deiconify(top)
    tkgrab.set(top)
    tkfocus(top)
    tkwait.window(top)
    }
